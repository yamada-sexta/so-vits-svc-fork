[project]
name = "so-vits-svc-fork"
version = "4.2.26"
description = "A fork of so-vits-svc."
authors = [{ name = "34j", email = "34j.95a2p@simplelogin.com" }]
requires-python = ">=3.9,<3.13"
readme = "README.md"
license = "MIT"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
]
dependencies = [
    "librosa",
    "numpy>=1.26.4,<2",
    "pyworld",
    "requests",
    "scipy",
    "sounddevice",
    "SoundFile",
    "tqdm",
    "praat-parselmouth",
    "onnx",
    "onnxsim",
    "onnxoptimizer",
    "torch>=2,<3",
    "torchaudio",
    "tensorboard",
    "rich",
    "tqdm-joblib>=0.0.4,<0.0.5",
    "tensorboardx",
    "cm-time>=0.1.2",
    "pebble>=5.0",
    "torchcrepe>=0.0.17",
    "lightning>=2.0.1,<3",
    "fastapi==0.111.1",
    "transformers>=4.28.1,<5",
    "matplotlib>=3.7.1,<4",
    "click>=8.1.7,<9",
    "setuptools>=69.5.1,<70",
    "pysimplegui-4-foss>=4.60.4.1,<5",
    "pygobject>=3.52.3",
]

[project.urls]
Repository = "https://github.com/34j/so-vits-svc-fork"
Documentation = "https://so-vits-svc-fork.readthedocs.io"
"Bug Tracker" = "https://github.com/34j/so-vits-svc-fork/issues"
Changelog = "https://github.com/34j/so-vits-svc-fork/blob/main/CHANGELOG.md"

[project.scripts]
so-vits-svc-fork = "so_vits_svc_fork.__main__:cli"
svc = "so_vits_svc_fork.__main__:cli"
svcf = "so_vits_svc_fork.__main__:cli"
svcg = "so_vits_svc_fork.gui:main"
svc-gui = "so_vits_svc_fork.gui:main"
svcf-gui = "so_vits_svc_fork.gui:main"
svc-gui-gtk = "so_vits_svc_fork.gui_gtk:main"

[dependency-groups]
dev = [
    "pre-commit>=3",
    "pytest>=8.0.0,<9",
    "pytest-cov>=4.0.0,<5",
    "pipdeptree>=2.7.0,<3",
    "pip-licenses>=5.0.0,<6",
    "mypy>=1.15.0",
]
docs = [
    "myst-parser>=0.16",
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
]

[tool.uv]
default-groups = [
    "dev",
    "docs",
]

[tool.hatch.build.targets.sdist]
include = ["src/so_vits_svc_fork"]

[tool.hatch.build.targets.wheel]
include = ["src/so_vits_svc_fork"]

[tool.hatch.build.targets.wheel.sources]
"src/so_vits_svc_fork" = "so_vits_svc_fork"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.semantic_release]
branch = "main"
version_toml = "pyproject.toml:tool.poetry.version"
version_variable = "src/so_vits_svc_fork/__init__.py:__version__"
build_command = "pip install poetry && poetry build"

[tool.pytest.ini_options]
addopts = "-v -Wdefault --cov=so_vits_svc_fork --cov-report=term-missing:skip-covered"
pythonpath = ["src"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
    'if __name__ == "__main__":',
]

[tool.isort]
profile = "black"
known_first_party = ["so_vits_svc_fork", "tests"]

[tool.autoflake]
remove_all_unused_imports = true

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
    'docs/.*',
    'setup.py',
]

# [[tool.mypy.overrides]]
# module = "tests.*"
# allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[tool.bandit]
exclude_dirs = ["src"]
